space_or_tab := ( space | tab ) ;
line_separator_raw := cr | lf | ( cr, lf ) ;
comment_start := '#' | ';' ;
line_continuation := backslash ;
(* Below it is not a *sequence* of backslash and eol, they are 2 *alternatives* *)
comment_unit := ( ac - ( line_separator_raw | line_continuation ) ) ;
(* line separator can't exist at the end of file without line separator *)
comment_unit_2 := comment_unit | ( line_continuation , line_separator_raw) ;
(* there may be no line separator at the end of file *)
comment := comment_start , { comment_unit_2 } ;
space_from_line_continuation := line_continuation , line_separator_raw ;
(* whitespace without linebreaks *)
sp := space_or_tab, {space_or_tab} ;
(* spaces with mandatory line feed *)
sp_with_linebreak_raw := line_separator_raw | comment ;
(* Any whitespace *)
ws_unit := space_or_tab | sp_with_linebreak_raw;
ws := ws_unit, {ws_unit} ;

file_content := space_at_start_of_file, [section, { space_between_sections , section }], space_at_end_of_file ;
section := [ section_header ] , [ space_before_section_body, section_body ] ;
section_header := lbracket, [sp] , section_title, [sp] , rbracket ;
section_body := [ list_of_body_units ] , [ space_between_variables_and_subsections, list_of_subsections ] ;
variable_line := special_include_syntax | variable_assignment_long | variable_name ;
list_of_body_units := variable_line, { space_between_variable_lines, variable_line } ;
list_of_subsections := subsection, { space_between_subsections, subsection } ;
subsection := subsection_header, [ space_after_subsection_header, list_of_body_units ] ;
subsection_header := lbracket , [sp], section_title , [sp] , dquote , subsection_title , dquote , [sp] , rbracket ;

section_title_unit := letter_english | minus | "." ;
section_title := letter_english, {section_title_unit};
subsection_title_unit = ac - dquote ;
subsection_title = { subsection_title_unit } ;
variable_name := letter_english, { { ( letter_english | digit | minus | "." ) } , ( letter_english | digit ) } ;
variable_assignment_long := variablename, [ws] , "=", [ws] , variable_value ;
variable_value := dquoted_string | unquoted_string ;
dquoted_string := dquote, {dquoted_string_unit} , dquote ;
dquoted_string_unit := dquoted_string_unit_raw | specialsequence |
	( line_continuation, line_separator_raw );
dquoted_string_unit_raw := ac - ( dquote | specialsequence | line_continuation | line_separator_raw );
unquoted_string := { unquoted_string_unit } ;
unquoted_string_unit := unquoted_string_unit_raw | ( line_continuation , line_separator_raw );
unquoted_string_unit_raw := ac - ( dquote | line_continuation | line_separator_raw | comment );
special_include_syntax := "include.path" ,  [ ws ] ,  "=" ,  [ ws ] ,  filepath ;
filepath := variable_value;


space_at_start_of_file := [ws] ;
space_between_sections := [ws] ;
space_before_section_body := [ws] ;
space_between_variable_lines := [ws] ;
space_between_variables_and_subsections := [ws] ;
space_after_subsection_header := [ws] ;
space_between_subsections := [ws] ;
space_at_end_of_file := [ws] ;


ac := ? Terminals.AnyChar ? ;
eol := ? Terminals.Eol ? ;
space := " " ;
tab := "\x0009" ;
lf := "\x000A" ;
cr := "\x000D" ;
backslash := "\x005C" ;
dquote := "\x0022" ;

seq := ( backslash , dquote ) 
	| ( backslash, backslash )
	| ( backslash , 'n' )
	| ( backslash , 't' )
	| ( backslash, 'b' )
	;

letter_english_large := "A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z" ;
letter_english_small := "a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z" ;
letter_english := letter_english_large | letter_english_small ;
letter_russian_large := "А"|"Б"|"В"|"Г"|"Д"|"Е"|"Ё"|"Ж"|"З"|"И"|"Й"|"К"|"Л"|"М"|"Н"|"О"|"П"|"Р"|"С"|"Т"|"У"|"Ф"|"Х"|"Ц"|"Ч"|"Ш"|"Щ"|"Ъ"|"Ы"|"Ь"|"Э"|"Ю"|"Я" ;
letter_russian_small := "а"|"б"|"в"|"г"|"д"|"е"|"ё"|"ж"|"з"|"и"|"й"|"к"|"л"|"м"|"н"|"о"|"п"|"р"|"с"|"т"|"у"|"ф"|"х"|"ц"|"ч"|"ш"|"щ"|"ъ"|"ы"|"ь"|"э"|"ю"|"я" ;
letter_russian := letter_russian_large | letter_russian_small ;
letter := letter_english | letter_russian;
digit := "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

minus :=  "-" ;
lbracket := '[' ;
rbracket := ']' ;
