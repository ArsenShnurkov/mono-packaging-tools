space = " " | "\t" ;

separator = "\n\r" | "\n" | "\r"  ;

spaces = space, {space} ;

minus =  "-" ;

dquote = '"' ;

backslash = "\\" ;

punctuationmarks = "[" | "]" | dquote | minus | "." | ";" | "#" ;

startofcomment = "#" | ";" ;

linecontinuation = backslash, lineseparator ;

letterenglishlarge = [A-Z] ;

letterenglishsmall = [a-z] ;

letterenglish = letterenglishlarge | letterenglishsmall ;

specialsequence = backslash, dquote | backslash, backslash | backslash, "\n" | backslash, "t" | backslash, "b" ;

digitexcludingzero = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

digit = "0" | digitexcludingzero ;

textofcomment = { digit | letter | punctuationmarks } ;

unitedlineseparator = {spaces} , { lineseparator, {spaces} } ;

symbol = allowedsymbol | nonallowedsymbol;

allowedsymbol = letterrussian | letterenglish | digit | punctuationmarks | spaces ;

comment = startofcomment , {textofcomment} ;

separator = spaces | unitedlineseparator | comment ;

section = sectionheader, {separator}, sectionbody ;

sectionbody = { variable, {separator} } | { subsection, {separator} } ;

section = { subsection, {separator} } ;

sectionheader = "[", {spaces}, sectiontitle, {spaces}, "]" ;

sectiontitleunit = letter | minus | "." ;

sectiontitle = sectiontitleunit, {sectiontitleunit} ;

subsection = subsectionheader, {separator}, subsectionbody ;

sectionheader = "[" , {spaces} , sectiontitle , {spaces} , dquote , subsectionheader , dquote , {spaces} , "]" ;

subsectionbody = {variable , {separator} } ;

variable = ( variablename, { {separator}, "=", {separator}, variablevalue } )
             |  ( "include.path",  {separator},  "=",  {separator},  filepath )
;

subsectionheadersymbol = backslash , dquote | backslash , backslash | allowedsymbol | spaces ;

subsectionheader = subsectionheadersymbol, {subsectionheadersymbol} ;

variablename = letterenglish, { letterenglish | [minus], letterenglish} ;

variablevalue = quotedstringwithcontinuations | unquotedstringinthewild ;

quotedstring = dquote, {allowedsymbol | spaces | specialsequence}, dquote ;

quotedstringwithcontinuations = dquote , { allowedsymbol | spaces | specialsequence | linecontinuation }, dquote ;

unquotedstringinthewildmeat = allowedsymbol | specialsequence ;

unquotedstringinthewild = unquotedstringinthewildmeat , { unquotedstringinthewildmeat } ,
    { { spaces | linecontinuation} , unquotedstringinthewildmeat } , [separator] ;

filecontent = [separator] , {section , {separator} } , [separator] ;

