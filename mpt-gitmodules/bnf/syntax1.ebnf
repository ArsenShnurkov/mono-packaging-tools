letterenglishlarge = "A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z" ;

letterenglishsmall = "a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z" ;

letterrussianlarge = "А"|"Б"|"В"|"Г"|"Д"|"Е"|"Ё"|"Ж"|"З"|"И"|"Й"|"К"|"Л"|"М"|"Н"|"О"|"П"|"Р"|"С"|"Т"|"У"|"Ф"|"Х"|"Ц"|"Ч"|"Ш"|"Щ"|"Ъ"|"Ы"|"Ь"|"Э"|"Ю"|"Я" ;

letterrussiansmall = "а"|"б"|"в"|"г"|"д"|"е"|"ё"|"ж"|"з"|"и"|"й"|"к"|"л"|"м"|"н"|"о"|"п"|"р"|"с"|"т"|"у"|"ф"|"х"|"ц"|"ч"|"ш"|"щ"|"ъ"|"ы"|"ь"|"э"|"ю"|"я" ;

letterenglish = letterenglishlarge | letterenglishsmall ;

letterrussian = letterrussianlarge | letterrussiansmall ;

letter = letterenglish | letterrussian;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

minus =  "-" ;

dquote = '"' ;

backslash = "\\" ;

lbracket = "[";

rbracket = "]";

space = " " | "\t" ;

specialsequence = backslash, dquote | backslash, backslash | backslash, "n" | backslash, "t" | backslash, "b" ;

linecontinuation = backslash, line_separator ;

line_separator = "\n\r" | "\n" | "\r"  ;

startofcomment = "#" | ";" ;

raw_symbol_inside_quotes = ? Terminals.AnyChar ? - ( dquote | specialsequence | linecontinuation | line_separator );

raw_symbol_in_comment = ? Terminals.AnyChar ? - line_separator ;

textofcomment = { raw_symbol_in_comment } ;

comment = startofcomment , { textofcomment } ;

(* at least one SPACE, comments are threated like spaces *)
spaces = ( space | comment ) , [ { ( space | comment ) } ] ; 

optional_spaces = [ spaces ] ;

(* at least one EOL *)
line_separators = line_separator, [ { [ { spaces } ] , line_separator } ]; 

line_break = line_separators , {spaces} ;

(* at least one separator *)
separators = ( spaces | line_break ) , { spaces | line_break } ;

optional_separators = [ separators ] ;


variablename = letterenglish, { { ( letterenglish | digit | minus | "." ) } , ( letterenglish | digit ) } ;

variable_assignment_long = variablename, { separators } , "=", { separators } , variablevalue ;

special_include_syntax = "include.path" ,  { separators } ,  "=" ,  { separators } ,  filepath ;

not_a_section_start = raw_symbol_in_comment - ( sectionheader | subsectionheader ) ;

malformed_body_entry =  not_a_section_start, { { separators } ,  not_a_section_start } ;

bodyentry = variablename | variable_assignment_long | special_include_syntax 
	| malformed_body_entry
	;



variablevalue = quotedstringwithcontinuations | unquoted_string_in_the_wild ;

filepath = variablevalue;

quotedstring = dquote, {raw_symbol_inside_quotes | specialsequence} , dquote ;

quotedstringwithcontinuations = dquote , { raw_symbol_inside_quotes | specialsequence | linecontinuation } , dquote ;

unquoted_string_in_the_wild_unit = raw_symbol_inside_quotes | specialsequence ;

unquoted_string_in_the_wild = unquoted_string_in_the_wild_unit , { unquoted_string_in_the_wild_unit } ,
    { { linecontinuation } ,
    unquoted_string_in_the_wild_unit , { unquoted_string_in_the_wild_unit } } ;


subsectiontitleunit = raw_symbol_inside_quotes | specialsequence ;

subsectiontitle = subsectiontitleunit, { subsectiontitleunit } ;

sectiontitleunit = letter | minus | "." ;

sectiontitle = sectiontitleunit, { sectiontitleunit } ;

subsectionheader = lbracket , optional_spaces , sectiontitle , spaces , dquote , subsectiontitle , dquote , optional_spaces , rbracket ;

sectionheader = lbracket, optional_spaces , sectiontitle, optional_spaces , rbracket ;


subsectionbody = bodyentry , { separators , bodyentry } ;

sectionbody = bodyentry , { separators , bodyentry } , { separators , subsection } ;

subsection = subsectionheader, { optional_separators , subsectionbody } ;

section_with_head = sectionheader, { optional_separators , sectionbody };

headless_section = subsection, { optional_separators , subsection } ;

section = section_with_head | headless_section ;

filecontent = optional_separators , { section , { optional_separators , section } } , optional_separators ;

