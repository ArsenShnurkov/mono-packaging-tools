letterenglishlarge = [ABCDEFGHIJKLMNOPQRSTUVWXYZ] ;

letterenglishsmall = [abcdefghijklmnopqrstuvwxyz] ;

letterrussianlarge = [АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ] ;

letterrussiansmall = [абвгдеёжзийклмнопрстуфхцчшщъыьэюя] ;

letterenglish = letterenglishlarge | letterenglishsmall ;

letterrussian = letterrussianlarge | letterrussiansmall ;

letter = letterenglish | letterrussian;

digitexcludingzero = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

digit = "0" | digitexcludingzero ;

space = " " | "\t" ;

separator = "\n\r" | "\n" | "\r"  ;

spaces = space, {space} ;

minus =  "-" ;

dquote = '"' ;

non_dquote = ? Terminals.AnyChar ? - dquote ;

backslash = "\\" ;

specialsequence = backslash, dquote | backslash, backslash | backslash, "n" | backslash, "t" | backslash, "b" ;

lbracket = "[";

rbracket = "]";

punctuationmarks = lbracket | rbracket | dquote | minus | "." | ";" | "#" ;

startofcomment = "#" | ";" ;

linecontinuation = backslash, lineseparator ;

textofcomment = { digit | letter | punctuationmarks } ;

unitedlineseparator = {spaces} , { lineseparator, {spaces} } ;

symbol = allowedsymbol | nonallowedsymbol;

allowedsymbol = letterrussian | letterenglish | digit | punctuationmarks | spaces ;

comment = startofcomment , {textofcomment} ;

separator = spaces | unitedlineseparator | comment ;













variable = ( variablename, { {separator}, "=", {separator}, variablevalue } )
             |  ( "include.path",  {separator},  "=",  {separator},  filepath )
;


variablename = letterenglish, { letterenglish | [minus], letterenglish} ;

variablevalue = quotedstringwithcontinuations | unquotedstringinthewild ;

quotedstring = dquote, {allowedsymbol | spaces | specialsequence}, dquote ;

quotedstringwithcontinuations = dquote , { allowedsymbol | spaces | specialsequence | linecontinuation }, dquote ;

unquotedstringinthewildmeat = allowedsymbol | specialsequence ;

unquotedstringinthewild = unquotedstringinthewildmeat , { unquotedstringinthewildmeat } ,
    { { spaces | linecontinuation} , unquotedstringinthewildmeat } , [separator] ;


subsectiontitleunit = non_dquote | specialsequence ;

subsectiontitle = sectiontitleunit, {sectiontitleunit} ;

sectiontitleunit = letter | minus | "." ;

sectiontitle = sectiontitleunit, { sectiontitleunit } ;

subsectionheader = lbracket , {spaces} , sectiontitle , {spaces} , dquote , subsectiontitle , dquote , {spaces} , rbracket ;

subsectionbody = variable , { {separator} , variable } ;

subsection = subsectionheader, {separator}, subsectionbody ;

sectionbody = variable , { {separator} , variable } , { {separator} , subsection } ;

sectionheader = lbracket, {spaces}, sectiontitle, {spaces}, rbracket ;

section = ( sectionheader, {separator}, sectionbody ) 
	| ( subsection, { {separator}, subsection } ) 
	;

filecontent = [separator] , {section , {separator} } , [separator] ;

